##########################################
##                                      ##
##        Mild MAlice Compiler          ##
##            st809 & peh10             ##
##                                      ##
##########################################


Handling Arithmetic Overflow
##########################################
In the examples, there are some issues with the 32 bit architecture when you handle arithmetic operations involving the MAX and MIN integers for the architecture. These appear to be caught at compile time in order to output error messages.
When running MAlice for a 64 bit architecture, these issues only occur at much higher numbers and we have decided to handle those cases rather than write workarounds to simulate errors for a 32 bit architecture.

Handling Variables (Related to Reg Alloc?)
##########################################

Handling Register Allocation
##########################################
How do we decide which register to use?
What to do if we run out of registers?

Optimisations
##########################################

Removing un-necessary includes
------------------------------------------
To reduce the size of the assembly file where possible, we used some logical statements to decide whether to include certain sections of code. These include the 'extern printf' statement, whether we need the statements for formatting integers and characters and the '.bss' section for variable definitions.

Smart mov instruction - no point if same reg
--------------------------------------------

Storing registers in variables and graph colouring
--------------------------------------------------

Removing definitions for variables which aren't used in any other expressions
-----------------------------------------------------------------------------



Current Bugs
###########################################
y was a number and y became 5.
x was a number and x became ~y.


OVERFLOW STRATEGY:
###########################################
If no overflow, code runs ok
if overflow flag registers as overflow and assign register as None?!
Then for each instruction where you need to use register which is overflowed. Push all/some(2?) registers.
Do the calcuation
pop the registers off the stack.
